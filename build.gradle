plugins {
    id 'java'
    id("xyz.jpenilla.run-paper") version "2.3.1"
    id 'com.github.johnrengelman.shadow' version '8.1.1'
}

group = 'org.alex_melan'
version = '1.0-SNAPSHOT'

repositories {
    mavenCentral()
    maven {
        name = "papermc-repo"
        url = "https://repo.papermc.io/repository/maven-public/"
    }
}

dependencies {
    // Paper API
    compileOnly("io.papermc.paper:paper-api:1.20.1-R0.1-SNAPSHOT")

    // HikariCP для пула соединений
    implementation 'com.zaxxer:HikariCP:5.1.0'

    // SQLite драйвер
    implementation 'org.xerial:sqlite-jdbc:3.44.1.0'

    // MySQL драйвер (опционально)
    compileOnly 'mysql:mysql-connector-java:8.0.33'

    // PostgreSQL драйвер (опционально)
    compileOnly 'org.postgresql:postgresql:42.6.0'

    // BCrypt для хеширования паролей
    implementation 'org.mindrot:jbcrypt:0.4'

    // SLF4J для логирования
    compileOnly 'org.slf4j:slf4j-api:2.0.7'
}

tasks {
    runServer {
        minecraftVersion("1.20")
    }
}

def targetJavaVersion = 17
java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'

    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        options.release.set(targetJavaVersion)
    }
}

processResources {
    def props = [version: version]
    inputs.properties props
    filteringCharset 'UTF-8'
    filesMatching('plugin.yml') {
        expand props
    }
}

//shadowJar {
//    archiveFileName = "${project.name}-${project.version}.jar"
//
//    // Relocate только те библиотеки, которые могут конфликтовать
//    relocate 'com.zaxxer.hikari', 'org.alex_melan.secureAuth.libs.hikari'
//    relocate 'org.mindrot.jbcrypt', 'org.alex_melan.secureAuth.libs.bcrypt'
//
//    // НЕ перемещаем SQLite драйвер - оставляем org.xerial.* как есть
//    // Это критично для правильной работы JDBC драйвера
//
//    // Исключаем ненужные файлы для уменьшения размера
//    exclude 'META-INF/NOTICE*'
//    exclude 'META-INF/LICENSE*'
//    exclude 'META-INF/DEPENDENCIES*'
//    exclude 'META-INF/*.SF'
//    exclude 'META-INF/*.DSA'
//    exclude 'META-INF/*.RSA'
//    exclude 'META-INF/maven/**'
//    // НЕ исключаем META-INF/services/ - там находится информация о драйверах
//
//    // НЕ используем minimize с JDBC драйверами
//    // minimize может удалить критичные классы драйвера
//
//    // Добавляем манифест для корректной работы
//    manifest {
//        attributes(
//                'Implementation-Title': project.name,
//                'Implementation-Version': project.version
//        )
//    }
//}

shadowJar {
    // Переименовываем итоговый файл
    archiveFileName = "${project.name}-${project.version}.jar"

    // Relocate зависимостей во избежание конфликтов
    relocate 'com.zaxxer.hikari', 'org.alex_melan.secureAuth.libs.hikari'
    relocate 'org.mindrot.jbcrypt', 'org.alex_melan.secureAuth.libs.bcrypt'
//    relocate 'org.xerial', 'org.alex_melan.secureAuth.libs.xerial'

    manifest {
        attributes(
                'Implementation-Title': project.name,
                'Implementation-Version': project.version
        )
    }
    // Минимизируем размер JAR
    minimize()
}

build.dependsOn shadowJar
